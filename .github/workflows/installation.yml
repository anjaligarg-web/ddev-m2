name: Magento 2 Installation
on:
    push:
    pull_request:
        branches:
            - main
    workflow_dispatch:

jobs:
    installation:
        strategy:
            fail-fast: false
            matrix:
                m2-version: [ 2.2.10, 2.3.0, 2.4.3 ]
                php-version: [ 7.2, 7.4 ]
                exclude:
                    - { php-version: 7.4, m2-version: 2.2.10 }
                    - { php-version: 7.4, m2-version: 2.3.0 }
                    - { php-version: 7.2, m2-version: 2.4.3 }

        name: Magento 2 Installation
        runs-on: ubuntu-latest

        steps:

            -   name: Clone DDEV files
                uses: actions/checkout@v2
                with:
                    path: .ddev

            -   name: Install DDEV
                env:
                  TMPDIR: /tmp
                  DDEV_VERSION: v1.18.2
                run: |
                    # @see https://ddev.readthedocs.io/en/stable/#installationupgrade-script-linux-and-macos-armarm64-and-amd64-architectures
                    # and https://github.com/drud/ddev/blob/master/scripts/install_ddev.sh
                    sudo apt-get -qq update
                    sudo apt-get -qq -y install libnss3-tools
                    FILEBASE="ddev_linux"
                    unamearch=$(uname -m)
                    case ${unamearch} in
                      x86_64) ARCH="amd64";
                      ;;
                      aarch64) ARCH="arm64";
                      ;;
                      arm64) ARCH="arm64"
                      ;;
                      *) printf "Sorry, your machine architecture ${unamearch} is not currently supported.\n$" && exit 106
                      ;;
                    esac
                    curl -fsSL "https://github.com/drud/ddev/releases/download/${{env.DDEV_VERSION}}/${FILEBASE}-${ARCH}.${{env.DDEV_VERSION}}.tar.gz" -o "${{env.TMPDIR}}/${FILEBASE}-${ARCH}.${{env.DDEV_VERSION}}.tar.gz"
                    curl -fsSL "https://github.com/drud/ddev/releases/download/${{env.DDEV_VERSION}}/${FILEBASE}-${ARCH}.${{env.DDEV_VERSION}}.tar.gz.sha256.txt" -o "${{env.TMPDIR}}/${FILEBASE}-${ARCH}.${{env.DDEV_VERSION}}.tar.gz.sha256.txt"
                    cd ${{env.TMPDIR}}
                    sha256sum -c ${FILEBASE}-${ARCH}.${{env.DDEV_VERSION}}.tar.gz.sha256.txt
                    tar -xzf ${FILEBASE}-${ARCH}.${{env.DDEV_VERSION}}.tar.gz
                    printf "Download verified. Ready to place ddev and mkcert in your /usr/local/bin.\n"
                    chmod +x mkcert
                    chmod +x ddev
                    sudo mv mkcert /usr/local/bin/
                    sudo mv ddev /usr/local/bin/
                    mkcert -install
                    ddev --version
                    ddev config global --instrumentation-opt-in=false --omit-containers=dba,ddev-ssh-agent

            -   name: Set M2_VERSION_CODE env
                # used in some directory path and conventional file naming
                # Example : 2.4.2 => m242
                run: |
                    echo "M2_VERSION_CODE=$(echo m${{ matrix.m2-version }} | sed 's/\.//g' )" >> $GITHUB_ENV

            -   name: Set ELASTIC_INSTALL_STRING env for 2.3
                if: startsWith(matrix.m2-version, '2.3')
                run: echo "ELASTIC_INSTALL_STRING=''" >> $GITHUB_ENV

            -   name: Set ELASTIC_INSTALL_STRING env for 2.4
                if: startsWith(matrix.m2-version, '2.4')
                run: echo "ELASTIC_INSTALL_STRING='--elasticsearch-host=elasticsearch'" >> $GITHUB_ENV

            -   name: Start DDEV for ${{ matrix.m2-version }} with PHP ${{ matrix.php-version }}
                run: |
                    cp .ddev/config_overrides/config.${{ env.M2_VERSION_CODE }}.yaml .ddev/config.${{ env.M2_VERSION_CODE }}.yaml
                    cp .ddev/additional_docker_compose/docker-compose.crowdsec.yaml .ddev/docker-compose.crowdsec.yaml
                    sed -i -e 's/^php_version:.*/php_version: ${{ matrix.php-version }}/g' .ddev/config.${{ env.M2_VERSION_CODE }}.yaml
                    ddev start

            -   name: Install Magento ${{ matrix.m2-version }} with PHP ${{ matrix.php-version }}
                # We don't use "ddev composer" create as it restarts all containers
                run: |
                    ddev composer config --global http-basic.repo.magento.com ${{ secrets.MAGENTO_MARKETPLACE_USERNAME }} ${{ secrets.MAGENTO_MARKETPLACE_PASSWORD }}
                    ddev exec composer create --repository=https://repo.magento.com/ magento/project-community-edition ${{ env.M2_VERSION_CODE }} ${{ matrix.m2-version }}
                    cp -r ${{ env.M2_VERSION_CODE }}/. ${{ github.workspace }}
                    rm -rf ${{ env.M2_VERSION_CODE }}

            -   name: Setup Magento ${{ matrix.m2-version }} with PHP ${{ matrix.php-version }}
                run: |
                    ddev magento setup:install \
                                     --base-url=https://${{ env.M2_VERSION_CODE }}.ddev.site \
                                     --db-host=db \
                                     --db-name=db \
                                     --db-user=db \
                                     --db-password=db \
                                     --backend-frontname=admin \
                                     --admin-firstname=admin \
                                     --admin-lastname=admin \
                                     --admin-email=admin@admin.com \
                                     --admin-user=admin \
                                     --admin-password=admin123 \
                                     --language=en_US \
                                     --currency=USD \
                                     --timezone=America/Chicago \
                                     --use-rewrites=1 \
                                     ${{ env.ELASTIC_INSTALL_STRING }}
            -   name: Installation tests
                run: |
                    ddev magento setup:upgrade
                    ddev magento setup:di:compile
                    ddev magento setup:static-content:deploy -f
                    ddev magento deploy:mode:set production
                    ddev magento indexer:reindex
